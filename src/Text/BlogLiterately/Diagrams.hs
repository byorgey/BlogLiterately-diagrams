-----------------------------------------------------------------------------
-- |
-- Module      :  Text.BlogLiterately.Diagrams
-- Copyright   :  (c) Brent Yorgey 2012
-- License     :  BSD-style (see LICENSE)
-- Maintainer  :  Brent Yorgey <byorgey@gmail.com>
--
-- A custom transformation pass for the @BlogLiterately@ blog-writing
-- tool, allowing inclusion of inline code using the @diagrams@
-- framework (<http://projects.haskell.org/diagrams>) which are
-- compiled into images.
--
-----------------------------------------------------------------------------

module Text.BlogLiterately.Diagrams
    ( diagramsXF
    ) where

import Control.Arrow
import System.FilePath

import Diagrams.Backend.Cairo
import Diagrams.Backend.Cairo.Internal
import Diagrams.Builder
import Diagrams.Prelude (R2, zeroV)
import Diagrams.TwoD.Size ( SizeSpec2D(Dims) )
import Text.BlogLiterately
import Text.Pandoc

-- | Transform a blog post by looking for code blocks with class
--   @dia@, and replacing them with images generated by evaluating the
--   identifier @dia@ and rendering the resulting diagram.  In
--   addition, blocks with class @dia-def@ are collected (and deleted
--   from the output) and provided as additional definitions that will
--   be in scope during evaluation of all @dia@ blocks.
--
--   Be sure to use this transform /before/ the standard
--   'Text.BlogLiterately.Transform.highlightXF' transform, /i.e./
--   with the 'Text.BlogLiterately.Run.blogLiteratelyCustom' function.
--   For example,
--
--   > main = blogLiteratelyCustom (diagramsXF : standardTransforms)
--
--   It also works well in conjunction with
--   'Text.BlogLiterately.Transform.centerImagesXF' (which, of course,
--   should be placed after @diagramsXF@ in the pipeline).
diagramsXF :: Transform
diagramsXF = Transform (\bl -> Kleisli $ renderDiagrams bl) (const True)

renderDiagrams :: BlogLiterately -> Pandoc -> IO Pandoc
renderDiagrams _ p = bottomUpM (renderDiagram defs) p
  where
    defs = queryWith extractDiaDef p

extractDiaDef :: Block -> [String]
extractDiaDef (CodeBlock (_, as, _) s)
    = [src | "dia-def" `elem` (maybe id (:) tag) as]
  where
    (tag, src) = unTag s

extractDiaDef b = []

diaDir = "diagrams"  -- XXX make this configurable

renderDiagram :: [String] -> Block -> IO Block
renderDiagram defs c@(CodeBlock (_, as, _) s)
    | "dia-def" `elem` tags = return Null
    | "dia" `elem` tags = do
        res <- buildDiagram
                 Cairo
                 (zeroV :: R2)
                 (CairoOptions "default.png" (Dims 500 200) PNG) -- get size from code
                 (src : defs)
                 "pad 1.1 dia"
                 []
                 ["Diagrams.Backend.Cairo"]
                 (hashedRegenerate
                    (\hash opts -> opts { cairoFileName = mkFile hash })
                    diaDir
                 )
        case res of
          ParseErr err    -> do putStrLn ("\nError while parsing\n" ++ src)
                                putStrLn err
                                return c
          InterpErr ierr  -> do putStrLn ("\nError while interpreting\n" ++ src)
                                putStrLn (ppInterpError ierr)
                                return c
          Skipped hash    -> return $ mkImageBlock hash
          OK hash (act,_) -> act >> (return $ mkImageBlock hash)

    | otherwise = return c
  where
    (tag, src)        = unTag s
    tags              = (maybe id (:) tag) as
    mkFile base       = diaDir </> base <.> "png"
    mkImageBlock hash = Para [Image [] (mkFile hash, "")]

renderDiagram _ b = return b
